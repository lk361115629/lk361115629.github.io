<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lycon&#39;s Blog</title>
  
  <subtitle>码农又在讨论种地用什么农具</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-25T13:55:59.834Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>摸索Kali-linux无线渗透(1)</title>
    <link href="http://yoursite.com/2018/03/25/%E6%91%B8%E7%B4%A2Kali-linux%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F-1/"/>
    <id>http://yoursite.com/2018/03/25/摸索Kali-linux无线渗透-1/</id>
    <published>2018-03-25T12:30:20.000Z</published>
    <updated>2018-03-25T13:55:59.834Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下摸索使用<a href="https://www.kali.org/" target="_blank" rel="noopener">kali</a>进行无线网络渗透的过程，掌握常用的无线渗透手段可以评估一个无线网络(wifi)的安全性。作为一个<a href="https://www.kali.org/" target="_blank" rel="noopener">kali</a>小白，这里只是记录一下学习过程，渗透高手可以点击右上角的红叉离开了，没用过linux的妹子可以先了解一下linux的使用~</p><a id="more"></a><h2 id="安装kali"><a href="#安装kali" class="headerlink" title="安装kali"></a>安装kali</h2><ul><li>在<a href="https://www.kali.org/" target="_blank" rel="noopener">kali官网</a>下载kali安装包</li><li>然后参考<a href="https://jingyan.baidu.com/article/d5c4b52b9bad54da560dc5ab.html" target="_blank" rel="noopener">如何在物理机上使用U盘安装Kali系统</a>，在你的笔记本（台式机的话kali有可能没有你的usb无线网卡驱动）上安装kali。或者你有其他方法安装kali，都可以。</li></ul><h2 id="查看网卡参数"><a href="#查看网卡参数" class="headerlink" title="查看网卡参数"></a>查看网卡参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig</span><br><span class="line">eth0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        ether 10:bf:48:02:1d:e0  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 980  bytes 78876 (77.0 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 980  bytes 78876 (77.0 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">wlan0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.1.208  netmask 255.255.255.0  broadcast 192.168.1.255</span><br><span class="line">        inet6 fe80::999:4462:44fd:1e99  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether c0:18:85:1f:0b:0d  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1588  bytes 433275 (423.1 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 1018  bytes 93996 (91.7 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>下面的<code>wlan0</code>或者以<code>wlan</code>打头的网卡就是你的无线网卡了，这里可以看到无线网卡的ip地址，mac地址等等参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ iwconfig </span><br><span class="line">wlan0     IEEE 802.11  ESSID:&quot;Lycon_2.4G&quot;  </span><br><span class="line">          Mode:Managed  Frequency:2.412 GHz  Access Point: 88:25:93:58:B4:E9   </span><br><span class="line">          Bit Rate=108 Mb/s   Tx-Power=15 dBm   </span><br><span class="line">          Retry short limit:7   RTS thr:off   Fragment thr:off</span><br><span class="line">          Encryption key:off</span><br><span class="line">          Power Management:off</span><br><span class="line">          Link Quality=67/70  Signal level=-43 dBm  </span><br><span class="line">          Rx invalid nwid:0  Rx invalid crypt:0  Rx invalid frag:0</span><br><span class="line">          Tx excessive retries:1  Invalid misc:798   Missed beacon:0</span><br></pre></td></tr></table></figure></p><p>使用<code>iwconfig</code>可以看到无线网卡当前的wlan参数:</p><ul><li><code>ESSID</code>为无线网卡当前连接的wifi名称</li><li><code>Frequency</code>为所在的信道的频率</li><li><code>Access Point</code>为AP的mac地址</li><li>还有其他的一些参数等等</li></ul><h2 id="扫描wifi信号"><a href="#扫描wifi信号" class="headerlink" title="扫描wifi信号"></a>扫描wifi信号</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ iwlist wlan0 scan</span><br><span class="line">wlan0     Scan completed :</span><br><span class="line">          Cell 01 - Address: 88:25:93:58:B4:E9</span><br><span class="line">                    Channel:1</span><br><span class="line">                    Frequency:2.412 GHz (Channel 1)</span><br><span class="line">                    Quality=61/70  Signal level=-49 dBm  </span><br><span class="line">                    Encryption key:on</span><br><span class="line">                    ESSID:&quot;Lycon_2.4G&quot;</span><br><span class="line">                    Bit Rates:1 Mb/s; 2 Mb/s; 5.5 Mb/s; 11 Mb/s; 6 Mb/s</span><br><span class="line">                              9 Mb/s; 12 Mb/s; 18 Mb/s</span><br><span class="line">                    Bit Rates:24 Mb/s; 36 Mb/s; 48 Mb/s; 54 Mb/s</span><br><span class="line">                    Mode:Master</span><br><span class="line">                    Extra:tsf=00000017b6a8c44f</span><br><span class="line">                    Extra: Last beacon: 12ms ago</span><br><span class="line">                    ......(other useless parameters)</span><br><span class="line">          Cell 02 - Address: xxx</span><br><span class="line">          Cell 03 - Address: xxx</span><br></pre></td></tr></table></figure><p>这个命令展示你的无限网卡能搜索到当前范围的wifi信号以及各个信号的参数，包括</p><ul><li><code>Address</code>为AP的mac地址</li><li><code>Channel</code>为AP所在的信道，一个信道对应一个2.4G周围的频率(Frequency)，比如信道1的频率是2.412 GHz。我们只需要关心<code>Channel</code>即可。</li><li><code>Signal level</code>为信号强度，绝对值越小，信号越强。</li><li><code>Encryption key</code>表示wifi是否加密。</li><li><code>ESSID</code>是wifi的名称，无需解释。</li></ul><h2 id="设置监听模式"><a href="#设置监听模式" class="headerlink" title="设置监听模式"></a>设置监听模式</h2><ul><li>因为wifi的所有封包，包括管理帧，数据帧都是在空气中传播的，所以只要将任意设备的无线网卡设置到想要嗅探的信道上就能嗅探这个信道的数据帧了；</li><li>我们需要把无线网卡设置为监听模式，并将其设置到合适的信道，这样才能捕获这个信道内的封包。</li></ul><p>使用下面的命令将无线网卡设置为监听模式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ airmon-ng start wlan0</span><br></pre></td></tr></table></figure></p><p>使用<code>ifconfig</code>查看新增的网卡：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig</span><br><span class="line">eth0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        ether 10:bf:48:02:1d:e0  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 988  bytes 79272 (77.4 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 988  bytes 79272 (77.4 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">wlan0mon: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        unspec C0-18-85-1F-0B-0D-30-3A-00-00-00-00-00-00-00-00  txqueuelen 1000  (UNSPEC)</span><br><span class="line">        RX packets 12117  bytes 2184763 (2.0 MiB)</span><br><span class="line">        RX errors 0  dropped 12117  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure></p><p><code>wlan0mon</code>便是新增的网卡了，带<code>mon</code>的网卡就表示监听(monitor)模式。<br>然后设置网卡的信道，比如信道11：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iwconfig wlan0mon channel 11</span><br></pre></td></tr></table></figure></p><h2 id="使用抓包工具抓包"><a href="#使用抓包工具抓包" class="headerlink" title="使用抓包工具抓包"></a>使用抓包工具抓包</h2><p>抓包工具，可视化的有<code>wireshark</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wireshark &amp;</span><br></pre></td></tr></table></figure></p><p>命令行的是<code>tcpdump</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tcpdump -ni wlan0mon [过滤条件] [-w 要写入文件名]</span><br></pre></td></tr></table></figure></p><p>常用的就是这样，具体的参数选项请查看<code>man tcpdump</code>。</p><blockquote><p><code>tcpdump</code>写入的文件最后可以由<code>wireshark</code>打开，所以用<code>tcpdump</code>抓包写入文件，然后用<code>wireshark</code>打开比较方便，当然使用<code>wireshark</code>直接保存文件也可以。</p></blockquote><h2 id="查看管理帧"><a href="#查看管理帧" class="headerlink" title="查看管理帧"></a>查看管理帧</h2><p>使用<code>iwlist wlan0mon scan</code>查看你的目标AP处于哪个信道，然后设置你的网卡到那个信道：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iwconfig wlan0mon channel N</span><br></pre></td></tr></table></figure></p><p>然后开启<code>wireshark</code>进行抓包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wireshark &amp;</span><br></pre></td></tr></table></figure></p><ul><li>设置过滤条件为<code>wlan.fc.type_subtype == 8</code>，可以查看你的目标AP发出的<code>beacon</code>帧，当然也有该信道其他AP发出的<code>beacon</code>帧。</li><li>设置过滤条件为<code>wlan.addr == 你的手机的mac地址</code>，可以查看你的手机连接wifi的握手包以及你的手机发出的数据包等等。</li><li>还有很多不同的过滤条件可以用来查看不同用途的封包，抓包工具是渗透利器。</li></ul><blockquote><p>未加密的wifi传输的都是明文包，别人可以轻而易举地用抓包工具查看你的数据，加密的（也就是有密码的wifi）的wifi传输的封包从网络层开始就是加密了的，我们抓到的数据包只有链路层数据是没有加密的，因此仍然可以获得所有AP的mac地址以及连接到这些AP的客户端（比如手机）的mac地址。</p></blockquote><h2 id="睡了，改天继续。。。"><a href="#睡了，改天继续。。。" class="headerlink" title="睡了，改天继续。。。"></a>睡了，改天继续。。。</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下摸索使用&lt;a href=&quot;https://www.kali.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kali&lt;/a&gt;进行无线网络渗透的过程，掌握常用的无线渗透手段可以评估一个无线网络(wifi)的安全性。作为一个&lt;a href=&quot;https://www.kali.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kali&lt;/a&gt;小白，这里只是记录一下学习过程，渗透高手可以点击右上角的红叉离开了，没用过linux的妹子可以先了解一下linux的使用~&lt;/p&gt;
    
    </summary>
    
    
      <category term="kali" scheme="http://yoursite.com/tags/kali/"/>
    
      <category term="渗透" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F/"/>
    
      <category term="wifi" scheme="http://yoursite.com/tags/wifi/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令笔记</title>
    <link href="http://yoursite.com/2018/03/19/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/03/19/git常用命令笔记/</id>
    <published>2018-03-19T08:17:59.000Z</published>
    <updated>2018-03-24T00:37:13.535Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>是<a href="https://en.wikipedia.org/wiki/Linus_Torvalds" target="_blank" rel="noopener">Linus</a>为了管理<a href="https://github.com/torvalds/linux" target="_blank" rel="noopener">linux内核代码</a>而编写的一个超强的<strong>分布式版本控制系统</strong>，一般以命令行的方式使用。若你是代码工作者，使用<a href="https://git-scm.com" target="_blank" rel="noopener">git</a>可以大大提高你的工作效率和机动性。</p><a id="more"></a><p>版本控制系统通俗点就是假设你的一个源码根目录现在被<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>控制了，那么你的所有源码版本（什么V1.00，V2.00，包括正在debug的版本，临时版本，发布版本）都在一个目录下面了，<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>可以轻松地<strong>切换版本</strong>，<strong>比较版本</strong>之间的差异，以及将源码给<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>服务器<strong>托管</strong>（比如无人不知的<a href="github.com">github</a>）,又或者可以利用<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>的<strong>代码合并</strong>功能进行多人协作。妈妈再也不用担心你为管理代码而烦恼了。</p><blockquote><p>这里只是做一些常用命令的笔记，如果要系统性地学习<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>可以参考<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰的git教程</a>。</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><ul><li>如果使用windows，到<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git官网</a>下载windows版本的git；</li><li>如果使用linux，安装git没有问题。最好是安装最新版的git：<a href="https://github.com/git/git" target="_blank" rel="noopener">https://github.com/git/git</a><br>下载源码编译安装git。</li></ul><h3 id="配置用户"><a href="#配置用户" class="headerlink" title="配置用户"></a>配置用户</h3><p>要先配置用户信息才能正常使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &apos;你的靓名&apos;</span><br><span class="line">$ git config --global user.email &apos;你的邮箱&apos;</span><br></pre></td></tr></table></figure></p><h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3><p>磨刀不误砍柴工，先不急着使用git，把一些难敲的命令配置一下别名，可以用别名代替复杂命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.st status</span><br><span class="line">$ git config --global alias.co checkout</span><br><span class="line">$ git config --global alias.lg &quot;log --graph --pretty=oneline --abbrev-commit&quot;</span><br></pre></td></tr></table></figure></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>可以在非空目录下（比如源码根目录）创建git版本库：</p><blockquote><p>以下命令都需要在源码根目录下执行。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><h3 id="查看git状态"><a href="#查看git状态" class="headerlink" title="查看git状态"></a>查看git状态</h3><p>查看git状态，有哪些文件已经发生了修改，有哪些文件已经被加入暂存区（被加入暂存区的文件才能提交）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git st</span><br></pre></td></tr></table></figure></p><h3 id="将文件加入暂存区"><a href="#将文件加入暂存区" class="headerlink" title="将文件加入暂存区"></a>将文件加入暂存区</h3><p>已经发生修改的文件（包括新增的文件和删除的文件），可以将其加入暂存区。一般就直接把整个目录加入暂存区就行了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure></p><h3 id="提交版本"><a href="#提交版本" class="headerlink" title="提交版本"></a>提交版本</h3><p>将修改加入暂存区后，可以将其提交，这样就产生了一个版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &apos;版本说明&apos;</span><br></pre></td></tr></table></figure></p><p>版本说明一定要认真写，不然以后就不知道哪个节点是哪个版本了，还是很乱。</p><h3 id="查看版本历史"><a href="#查看版本历史" class="headerlink" title="查看版本历史"></a>查看版本历史</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git lg</span><br><span class="line">* 22330cc (HEAD -&gt; my-hexo-theme, origin/my-hexo-theme, origin/HEAD) add archives</span><br><span class="line">* c44db62 add some effects</span><br><span class="line">* bdca153 fix href stype</span><br><span class="line">* bebd9e3 sth. not important</span><br><span class="line">* a2ab1ab sth. not important</span><br></pre></td></tr></table></figure><p><code>HEAD</code>指针指向当前工作区的版本，<code>HEAD -&gt; my-hexo-theme</code>就表示当前工作区版本为<code>my-hexo-theme</code>，这个版本的分支名为<code>my-hexo-theme</code>，版本id为<code>22330cc</code>,后面的<code>add archives</code>就是当初提交时填写的<code>版本说明</code>。</p><h3 id="比较版本"><a href="#比较版本" class="headerlink" title="比较版本"></a>比较版本</h3><p>可以通过命令轻松的比较两个版本之间的差异：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff 较老版本 较新版本</span><br></pre></td></tr></table></figure></p><p>“较老/较新版本”可以填：</p><ul><li>分支名</li><li>版本id</li><li>HEAD^，HEAD^^等等(几个<code>^</code>就是HEAD回退几个版本)<br>也可以直接简写<code>git diff</code>也就是<code>git diff HEAD 工作区</code>，就是比较当前修改和最近提交的版本。</li></ul><h3 id="版本切换"><a href="#版本切换" class="headerlink" title="版本切换"></a>版本切换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 版本</span><br></pre></td></tr></table></figure><p>同样，“版本”可以填：</p><ul><li>分支名</li><li>版本id</li><li>HEAD^，HEAD^^等等</li></ul><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><ul><li>git最强大的就是分支功能了。有了分支功能，我们可以在好几个分支上进行开发或调试（在<code>master</code>分支上进行版本发布，在<code>dev</code>分支上进行开发，若有临时需求可以在<code>dev</code>分支上创建其他分支），可以应付傻领导各样的需求。</li><li>其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。但Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件（这段话是抄的）。</li></ul><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><p>查看<code>本地分支</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure></p><p>查看<code>远程分支</code>(例如github)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -r</span><br></pre></td></tr></table></figure></p><h3 id="创建-切换分支"><a href="#创建-切换分支" class="headerlink" title="创建+切换分支"></a>创建+切换分支</h3><p>创建分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch 分支名</span><br></pre></td></tr></table></figure></p><p>创建分支后我们往往会想切换到那个分支，所有一般直接<strong>创建+切换分支</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git co -b 分支名</span><br></pre></td></tr></table></figure></p><p>切换分支，也就是把HEAD指针指向某个分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git co 分支名</span><br></pre></td></tr></table></figure></p><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge 分支名</span><br></pre></td></tr></table></figure><p>这里要注意一下，合并分支时目标分支要比当前分支新，也就是说我们先<code>git co 老分支</code>再<code>git merge 新分支</code>。其实分支合并就是把老分支的指针指向新分支而已（大部分情况）。</p><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>我们把临时分支合并到主分支后，往往想要删除临时分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d 分支名</span><br></pre></td></tr></table></figure></p><h3 id="stash功能"><a href="#stash功能" class="headerlink" title="stash功能"></a>stash功能</h3><p>当你在版本A的基础上开发一个新的功能，还无法编译使用。这时发现版本A有一个bug，要在版本A的基础上debug，这时就可以使用<code>stash</code>功能把新功能的代码给临时保存起来（直接提交一个版本也可以，但是这样就会多出一个毫无意义的版本）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br></pre></td></tr></table></figure></p><p>现在工作区已经没有对于版本A的修改了，创建一个<code>debug临时分支</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git co -b debug</span><br></pre></td></tr></table></figure></p><p>在<code>debug分支</code>上处理bug，处理完成后提交<code>debug分支</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git comment -m &apos;fuck the bug&apos;</span><br></pre></td></tr></table></figure></p><p>切回原来的分支，比如<code>dev分支</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git co dev</span><br></pre></td></tr></table></figure></p><p>把<code>stash</code>保存的现场恢复，继续开发新功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure></p><p>这样的话敲几个命令就能省去拷贝好几份代码的麻烦，完美。</p><h2 id="使用github"><a href="#使用github" class="headerlink" title="使用github"></a>使用github</h2><h3 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h3><p>cd到主目录下，创建ssh-key：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure></p><p>上面的<a href="mailto:youremail@example.com" target="_blank" rel="noopener">youremail@example.com</a>就是你自己的邮箱，然后一路回车，完成后应该可以在主目录下找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件。<br>然后到你的github账号设置里，有一个<code>SSH Keys</code>的配置，把<code>id_rsa.pub</code>里面的文本添加进去就可以了。</p><h3 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h3><p>克隆也就是下载版本库。比如你要克隆bootstrap项目的源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/twbs/bootstrap</span><br></pre></td></tr></table></figure></p><p>比如你要克隆自己的项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/你的用户名/仓库名</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:你的用户名/仓库名</span><br></pre></td></tr></table></figure></p><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><p>先用你的github账号创建一个空的仓库，并指定仓库名；<br>然后添加远程仓库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:你的用户名/仓库名</span><br></pre></td></tr></table></figure></p><p><code>origin</code>是远程仓库在本地的名字，一般就是取<code>origin</code>，约定俗成。</p><h3 id="推送本地仓库到远程仓库"><a href="#推送本地仓库到远程仓库" class="headerlink" title="推送本地仓库到远程仓库"></a>推送本地仓库到远程仓库</h3><p>一次推送只能推送一个分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin 分支名</span><br></pre></td></tr></table></figure></p><p>然后到你的github账号看看文件是否已经更新了。</p><h3 id="拉取远程仓库到本地"><a href="#拉取远程仓库到本地" class="headerlink" title="拉取远程仓库到本地"></a>拉取远程仓库到本地</h3><p>假设你和别人共同开发一份代码，当别人<code>push</code>之后那么远程仓库就比你本地的仓库要新了，这时就需要拉取远程仓库到本地：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin 分支名</span><br></pre></td></tr></table></figure></p><p>其实<code>pull</code>就是<code>fetch</code>+<code>merge</code>，将远程分支下载到本地后合并；<br>你可以选择先<code>fetch</code>看看别人写的辣鸡代码再决定是否合并，不想合并就把<code>fetch</code>过来的分支删除。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git&lt;/a&gt;是&lt;a href=&quot;https://en.wikipedia.org/wiki/Linus_Torvalds&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Linus&lt;/a&gt;为了管理&lt;a href=&quot;https://github.com/torvalds/linux&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;linux内核代码&lt;/a&gt;而编写的一个超强的&lt;strong&gt;分布式版本控制系统&lt;/strong&gt;，一般以命令行的方式使用。若你是代码工作者，使用&lt;a href=&quot;https://git-scm.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git&lt;/a&gt;可以大大提高你的工作效率和机动性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo+Git构建Github-Blog</title>
    <link href="http://yoursite.com/2018/03/09/%E4%BD%BF%E7%94%A8Hexo-Git%E6%9E%84%E5%BB%BAGithub-Blog/"/>
    <id>http://yoursite.com/2018/03/09/使用Hexo-Git构建Github-Blog/</id>
    <published>2018-03-09T12:29:32.000Z</published>
    <updated>2018-03-19T10:49:52.923Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>是一个用于构建Blog的web框架，使用<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>可以方便地搭建自己的个人博客（并且可以使用Github作为服务器），搭建完成后只要编辑<a href="http://www.markdown.cn/" target="_blank" rel="noopener">markdown</a>文件就可以发布博客了。本站就是基于<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>搭建的——<a href="https://lk361115629.github.io/" target="_blank" rel="noopener">https://lk361115629.github.io/</a></p><a id="more"></a><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li>安装<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li><li>安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a></li></ul><h2 id="安装和配置Hexo"><a href="#安装和配置Hexo" class="headerlink" title="安装和配置Hexo"></a>安装和配置Hexo</h2><h3 id="下载cnpm"><a href="#下载cnpm" class="headerlink" title="下载cnpm"></a>下载cnpm</h3><p>若是windows，使用<code>cmd</code>终端或者<code>PowerShell</code>执行下述命令（or <code>bash</code> if linux）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p><p>安装好后就可以使用国内npm镜像了，用<code>cnpm</code>命令代替<code>npm</code>，速度快一点。</p><h3 id="下载Hexo"><a href="#下载Hexo" class="headerlink" title="下载Hexo"></a>下载Hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>在本地创建一个存放Hexo工程文件的空目录，或者执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir Hexo</span><br></pre></td></tr></table></figure></p><p>进入该目录，初始化Hexo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd Hexo</span><br><span class="line">$ hexo init</span><br><span class="line">$ cnpm install</span><br></pre></td></tr></table></figure></p><p>注意看打印信息，是否执行成功。<br>然后Hexo目录下应该是这种结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">_config.yml  db.json  node_modules/  package.json  scaffolds/  source/  themes/</span><br></pre></td></tr></table></figure></p><h3 id="从github克隆NexT主题"><a href="#从github克隆NexT主题" class="headerlink" title="从github克隆NexT主题"></a>从github克隆NexT主题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/lk361115629/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>如果想使用原版<code>NexT</code>主题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p><p>配置Hexo <strong>根目录</strong> 的<code>_config.yml</code>文件中<code>theme</code>为next：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></p><p>若希望网页为中文，则同时配置<code>language</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure></p><h3 id="开启hexo服务器"><a href="#开启hexo服务器" class="headerlink" title="开启hexo服务器"></a>开启hexo服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>可以看到如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></p><p>此时web已经在本地开始运行，然后打开浏览器输入：<code>127.0.0.1:4000</code> 就可以看到构建好的博客页面了。<br><strong>到这里，hexo的安装和配置就完成了，如果你有云服务器，在服务器上运行hexo服务器即可。</strong></p><h2 id="配置github仓库"><a href="#配置github仓库" class="headerlink" title="配置github仓库"></a>配置github仓库</h2><p>这里假定你已经有<a href="https://github.com/" target="_blank" rel="noopener">github</a>账号并且能正常使用。<br>若没有，到<a href="https://github.com/" target="_blank" rel="noopener">github</a>注册一个账号。</p><h3 id="创建空仓库"><a href="#创建空仓库" class="headerlink" title="创建空仓库"></a>创建空仓库</h3><p>创建一个空仓库，仓库名字为<code>你的用户名.github.io</code>，<strong>仓库名不能写错</strong>。<br>例如，创建我的仓库(用户名为<code>lk361115629</code>)：</p><hr><p><img src="repo-name.png" alt=""></p><h3 id="添加deploy地址"><a href="#添加deploy地址" class="headerlink" title="添加deploy地址"></a>添加deploy地址</h3><p>打开<code>Hexo目录</code>下面的<code>_config.yml</code>，拉到最下面，修改<code>deploy</code>配置为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/你的用户名/你的用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:你的用户名/你的用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><h3 id="生成静态html文件并上传"><a href="#生成静态html文件并上传" class="headerlink" title="生成静态html文件并上传"></a>生成静态html文件并上传</h3><p>进入<code>Hexo目录</code>，依次执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><p>如果提示<code>INFO Deploy done: git</code>则表示部署成功了。<br>如果提示错误<code>ERROR Deployer not found: git</code>表示hexo的部署器没有安装，执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install hexo-deployer-git --save</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><p>就可以解决了。</p><h3 id="访问自己构建的博客"><a href="#访问自己构建的博客" class="headerlink" title="访问自己构建的博客"></a>访问自己构建的博客</h3><p>浏览器输入<code>你的用户名.github.io</code>就可以访问了。</p><h2 id="创建和发布文章"><a href="#创建和发布文章" class="headerlink" title="创建和发布文章"></a>创建和发布文章</h2><h3 id="创建和编辑文章"><a href="#创建和编辑文章" class="headerlink" title="创建和编辑文章"></a>创建和编辑文章</h3><p>进入<code>Hexo目录</code>，执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &apos;文章标题&apos;</span><br></pre></td></tr></table></figure></p><p>然后在<code>Hexo/source/_posts</code>目录可以看到刚刚创建的后缀名为<code>.md</code>的文件，用<a href="http://markdownpad.com/" target="_blank" rel="noopener">markdown编辑器</a>编辑这个文件就是编写博客了，markdown语法<a href="http://www.markdown.cn/" target="_blank" rel="noopener">点我</a>。<br>开启hexo服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><p>文章保存后在浏览器的<code>127.0.0.1:4000</code>可以看到发布文章的效果；<br>文章修改保存后直接刷新页面就可以看到效果了。</p><h3 id="文章插入图片"><a href="#文章插入图片" class="headerlink" title="文章插入图片"></a>文章插入图片</h3><p>在<code>Hexo目录</code>执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure></p><p>在<code>source/_posts/</code>创建与文章标题相同的目录，例如文章标题为<code>hello</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ./source/_posts/hello</span><br></pre></td></tr></table></figure></p><p>然后把图片放到刚刚创建的目录下，比如<code>a.png</code>，在文章中插入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](a.png)</span><br></pre></td></tr></table></figure></p><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><p>发布文章的方法和上面部署博客的方法一样，在<code>Hexo目录</code>执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><p><strong>好了，最后把链接<code>https://你的用户名.github.io</code>发送给你心仪的的妹子就可以了 :) </strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;是一个用于构建Blog的web框架，使用&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;可以方便地搭建自己的个人博客（并且可以使用Github作为服务器），搭建完成后只要编辑&lt;a href=&quot;http://www.markdown.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;markdown&lt;/a&gt;文件就可以发布博客了。本站就是基于&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;搭建的——&lt;a href=&quot;https://lk361115629.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://lk361115629.github.io/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/1970/01/01/hello-world/"/>
    <id>http://yoursite.com/1970/01/01/hello-world/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2018-03-19T04:25:39.378Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
